<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Apereo under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Apereo licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">

  <bean id="uPortalLdapAttributeSource" class="org.apereo.services.persondir.support.ldap.LdapPersonAttributeDao">
    <property name="contextSource" ref="defaultLdapContext" />

    <!--
     | Enter all keys that you want users to search with in the Directory Search portlet or portal
     | search capability. This should contain values from list directoryQueryAttributes in
     | properties/contexts/userContext.xml.  (Key is internal name, value is ldap attribute name.)
    -->
    <property name="queryAttributeMapping">
      <map>
        <entry key="username" value="uid" /><!-- should match the uid attribute in your directory;  e.g. sAMAccountName for Active Directory. -->
        <entry key="cn"  value="cn" />
        <entry key="givenName" value="givenName"/>
        <entry key="sn" value="sn" />
        <entry key="mail" value="mail" />
      </map>
    </property>
    <property name="queryType" value="OR"/>
    <!-- key is ldap attribute name, values are internal names. -->
    <property name="resultAttributeMapping">
      <map>
        <entry key="uid">
          <set>
            <value>uid</value>
            <value>username</value> <!-- UP-4185 populate username in case user hasn't logged in yet -->
            <value>user.login.id</value>  <!-- UP-4177 LDAP needs to fill in user.login.id -->
          </set>
        </entry>
        <entry key="eduPersonAffiliation">
          <value>eduPersonAffiliation</value>
        </entry>
        <entry key="eduPersonPrimaryAffiliation">
          <value>eduPersonPrimaryAffiliation</value>
        </entry>
        <entry key="eduPersonNickname">
          <set>
            <value>eduPersonNickname</value>
            <value>user.name.nickName</value>
          </set>
        </entry>
        <entry key="eduPersonOrgDN">
          <set>
            <value>eduPersonOrgDN</value>
            <value>user.employer</value>
          </set>
        </entry>
        <entry key="eduPersonOrgUnitDN">
          <set>
            <value>eduPersonOrgUnitDN</value>
            <value>user.department</value>
          </set>
        </entry>
        <entry key="eduPersonPrincipalName">
          <value>eduPersonPrincipalName</value>
        </entry>
        <entry key="c">
          <value>c</value>
        </entry>
        <entry key="cn">
          <value>cn</value>
        </entry>
        <entry key="description">
          <value>description</value>
        </entry>
        <entry key="displayName">
          <value>displayName</value>
        </entry>
        <entry key="givenName">
          <set>
            <value>givenName</value>
            <value>user.name.given</value>
          </set>
        </entry>
        <entry key="homePhone">
          <value>homePhone</value>
        </entry>
        <entry key="jpegPhoto">
          <value>jpegPhoto</value>
        </entry>
        <entry key="l">
          <value>l</value>
        </entry>
        <entry key="mail">
          <set>
            <value>mail</value>
            <value>user.home-info.online.email</value>
          </set>
        </entry>
        <entry key="o">
          <value>o</value>
        </entry>
        <entry key="ou">
          <value>ou</value>
        </entry>
        <entry key="postalAddress">
          <value>postalAddress</value>
        </entry>
        <entry key="postalCode">
          <value>postalCode</value>
        </entry>
        <entry key="sn">
          <set>
            <value>sn</value>
            <value>user.name.family</value>
          </set>
        </entry>
        <entry key="street">
          <value>street</value>
        </entry>
        <entry key="member">
          <value>member</value>
        </entry>
        <entry key="memberOf">
          <value>memberOf</value>
        </entry>
        <entry key="telephoneNumber">
          <value>telephoneNumber</value>
        </entry>
      </map>
    </property>
  </bean>
  <bean id="smartLdapGroupStore" class="org.apereo.portal.groups.smartldap.SmartLdapGroupStore" lazy-init="false" depends-on="smartLdapContext">

    <!--
     | This property is the ContextSource instance that will be used to connect to LDAP.  Uncomment the
     | following to use the LDAP settings in ldapContext.xml for user attributes, or supply your own.
     +-->
    <!--
    -->
    <property name="ldapContext" ref="smartLdapContext"/>

    <!--
     | This property identifies the name of the Person Attribute that
     | lists the SmartLdap groups each person is a member of.
     +-->
    <property name="memberOfAttributeName" value="memberOf"/>

    <!--
     | BaseDn that will be passed to the search (not to the context).
     |
     | WARNING:  If you get an error like this...
     |   ...PartialResultException: [LDAP: error code 10...
     | it probably means your baseGroupDn isn't correct!
     +-->
    <property name="baseGroupDn" value="ou=Groups"/>

    <!--
     | This parameter is used to extract the id path of the groups
     | from their dn. The id path is expected to be catched from the first group
     | of the regex.
    <property name="childGroupKeyRegex" value="cn=(.*),ou=Groups,dc=apereo,dc=org"/>
    <property name="childGroupKeyRegex" value="cn=(.*),ou=.*,dc=apereo,dc=org"/>
     +-->

    <!--
     | This parameter is used to avoid performance problems with large people's members groups
     | on groups manager. Default value is false, so comment to disable.
     +-->
    <!--
    -->
    <property name="displayPersonMembers" value="true" />
    <!--
     | Group Tree Separator is used to set the char that is used to compose
     | Group Id in grouper that represent each tree paths.
     | Override it if the default value ":" doesn't match
    -->
    <!--<property name="groupTreeSeparator" value=":" />-->

    <!--
     | LDAP query string that will be passed to the search.
     +-->
    <property name="filter" value="(objectClass=groupOfNames)"/>

    <!--
     | Period, in seconds, after which SmartLdap will drop and re-init the groups
     | tree.  A value of zero or less (negative) disables this feature.
     +-->
    <property name="groupsTreeRefreshIntervalSeconds" value="900"/>

    <!--
     | These next 2 properties tell smartLdap whether to gather additional groups that
     | are members of groups returned by the first baseGroupDn and filter, and where to
     | look if so.
     |
     |   - resolveMemberGroups=[true|false]
     |   - resolveDn={a different, broader baseGroupDn than the one above}
     |
     | Here's how it works:  smartLdap will first collect all groups under the
     | baseGroupDn specified above.  If 'resolveMemberGroups' is enabled, it will
     | also search for additional groups (found within the 'resolveDn' specified
     | here) that are members of groups in the first collection.
     +-->
    <property name="resolveMemberGroups" value="true"/>
    <property name="resolveDn" value="ou=Groups2"/><!--Used with resolveMemberGroups -->

    <!--
     | This property identifies the org.springframework.ldap.core.AttributesMapper
     | implementation used in reading the groups records from LDAP.
     +-->
    <property name="attributesMapper">
      <bean id="attributesMapper" class="org.apereo.portal.groups.smartldap.SimpleAttributesMapper">
        <!--
         | Name of the group attribute that tells you its key.
         +-->
        <property name="keyAttributeName">
          <value>seeAlso</value>
        </property>
        <!--
         | Name of the group attribute that tells you its name.
         +-->
        <property name="groupNameAttributeName">
          <value>cn</value>
        </property>
        <!--
         | Name of the group attribute that lists its members.
         +-->
        <property name="membershipAttributeName">
          <value>member</value>
        </property>
      </bean>
    </property>
  </bean>
  <bean id="smartLdapContext" class="org.springframework.ldap.pool.factory.PoolingContextSource">
    <property name="contextSource" ref="smartLdapContext_target"/>
    <property name="dirContextValidator">
      <bean class="org.springframework.ldap.pool.validation.DefaultDirContextValidator">
        <property name="searchControls">
          <bean class="javax.naming.directory.SearchControls">
            <property name="searchScope"><util:constant static-field="javax.naming.directory.SearchControls.SUBTREE_SCOPE" /></property>
            <property name="countLimit" value="1" />
            <property name="returningAttributes"><list><value>objectclass</value></list></property>
            <property name="timeLimit" value="500" />
          </bean>
        </property>
      </bean>
    </property>
    <property name="minIdle" value="${ldap.defaultLdapContext.pool.minIdle:1}" />
    <property name="maxActive" value="${ldap.defaultLdapContext.pool.maxActive:32}" />
    <property name="maxIdle" value="${ldap.defaultLdapContext.pool.maxIdle:32}" />
    <property name="maxWait" value="${ldap.defaultLdapContext.pool.maxWait:1000}"/>
    <property name="testOnBorrow" value="${ldap.defaultLdapContext.pool.testOnBorrow:true}"/>
    <property name="testWhileIdle" value="${ldap.defaultLdapContext.pool.testWhileIdle:true}"/>
    <property name="timeBetweenEvictionRunsMillis" value="${ldap.defaultLdapContext.pool.timeBetweenEvictionRunsMillis:120000}"/>
    <property name="minEvictableIdleTimeMillis" value="${ldap.defaultLdapContext.pool.minEvictableIdleTimeMillis:900000}"/>
    <property name="numTestsPerEvictionRun" value="${ldap.defaultLdapContext.pool.numTestsPerEvictionRun:6}"/>
  </bean>

  <bean id="smartLdapContext_target" class="org.springframework.ldap.core.support.LdapContextSource">
    <property name="url" value="${ldap.smartLdapContext.url:}"/>
    <property name="base" value="${ldap.smartLdapContext.baseDn:}"/>
    <property name="userDn" value="${ldap.smartLdapContext.user:}"/>
    <property name="password" value="${ldap.smartLdapContext.password:}"/>
    <property name="pooled" value="${ldap.smartLdapContext.pooled:false}"/>
  </bean>

</beans>
